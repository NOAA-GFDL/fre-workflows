#!/bin/bash -l
#
# ++++ THIS IS A CYLC JOB SCRIPT ++++
# Workflow: am5_c96L33_amip/run3
# Task: 19800101T0000Z/pp-starter
# Job log directory: 19800101T0000Z/pp-starter/01
# Job runner: ppan_handler
# Execution time limit: 14400.0

# DIRECTIVES:
#SBATCH --job-name=pp-starter.19800101T0000Z.am5_c96L33_amip/run3
#SBATCH --output=cylc-run/am5_c96L33_amip/run3/log/job/19800101T0000Z/pp-starter/01/job.out
#SBATCH --error=cylc-run/am5_c96L33_amip/run3/log/job/19800101T0000Z/pp-starter/01/job.err
#SBATCH --time=240:00
#SBATCH --comment=xtmp,epmt,canopy
if [[ $1 == 'noreinvoke' ]]; then
    shift
else
    exec bash -l "$0" noreinvoke "$@"
fi

CYLC_FAIL_SIGNALS='EXIT ERR TERM XCPU'
export PATH=/home/fms/fre-canopy/system-settings/bin:$PATH
export CYLC_VERBOSE=true
export CYLC_DEBUG=true
export CYLC_VERSION='8.2.1'
export CYLC_WORKFLOW_ID="am5_c96L33_amip/run3"

cylc__job__inst__cylc_env() {
    # CYLC WORKFLOW ENVIRONMENT:
    export CYLC_CYCLING_MODE="gregorian"
    export CYLC_UTC="True"
    export CYLC_WORKFLOW_FINAL_CYCLE_POINT="19810101T0000Z"
    export CYLC_WORKFLOW_INITIAL_CYCLE_POINT="19800101T0000Z"
    export CYLC_WORKFLOW_NAME="am5_c96L33_amip"
    export CYLC_WORKFLOW_NAME_BASE="am5_c96L33_amip"
    export TZ="UTC"
    export CYLC_WORKFLOW_UUID="4d9afa6d-2999-44ca-a99d-735dd80f2e5d"

    # CYLC TASK ENVIRONMENT:
    export CYLC_TASK_COMMS_METHOD=zmq
    export CYLC_TASK_JOB="19800101T0000Z/pp-starter/01"
    export CYLC_TASK_NAMESPACE_HIERARCHY="root PP-STARTER pp-starter"
    export CYLC_TASK_DEPENDENCIES=""
    export CYLC_TASK_TRY_NUMBER=1
    export CYLC_TASK_FLOW_NUMBERS=1
}

cylc__job__inst__user_env() {
    # TASK RUNTIME ENVIRONMENT:
    export COPY_TOOL targetFile
    COPY_TOOL="gcp --verbose"
    targetFile="/archive/inl/am5/2022.01/c96L33_am5a0_cmip6Diag/gfdl.ncrc5-intel22-classic-prod-openmp/history/YYYYMMDD.nc.tar"
}

cylc__job__inst__init_script() {
# INIT-SCRIPT:
module load ppan_environment
module load epmt
module list
epmt check
}

cylc__job__inst__env_script() {
# ENV-SCRIPT:
eval $(rose task-env)
env
export PAPIEX_OLD_OUTPUT=$PAPIEX_OUTPUT
export PAPIEX_OLD_OPTIONS=$PAPIEX_OPTIONS
unset PAPIEX_OUTPUT PAPIEX_OPTIONS LD_PRELOAD
epmt annotate EPMT_JOB_TAGS="exp_name:am5_c96L33_amip;exp_platform:gfdl.ncrc5-intel22-classic;exp_target:prod-openmp;exp_component:pp-starter;exp_component_source:PLACE_HOLDER;exp_time:$CYLC_TASK_CYCLE_POINT;exp_seg_months:P1Y;pp_chunk_a_months:24;pp_chunk_b_months:48;script_name:$CYLC_TASK_NAME;pp_is_canopy:YES"
export PAPIEX_OPTIONS=$PAPIEX_OLD_OPTIONS
export LD_PRELOAD=$PAPIEX_LD_PRELOAD
export PAPIEX_OUTPUT=$PAPIEX_OLD_OUTPUT
}

cylc__job__inst__script() {
# SCRIPT:
# Returns 0 if ready, 1 if not
#
echo Arguments:
echo "    INFO: trigger: $targetFile"
echo "    INFO: cycle point: $CYLC_TASK_CYCLE_POINT"
# Resolve the date strings: YYYY, MM, DD, HH
IFS='-' read YYYY MM DD << DATES
$(cylc cycle-point --template CCYY-MM-DD)
DATES
HH=$(cylc cycle-point --template hh)
targetFileResolved=$(echo $targetFile | sed -e "s/YYYY/$YYYY/g" -e "s/MM/$MM/g" -e "s/DD/$DD/g" -e "s/HH/$HH/g")
echo "    trigger (date expanded): $targetFileResolved"
# Look for target file
if ls $targetFileResolved; then
    echo "Target ${targetFileResolved} is ready"
    exit 0
else
    echo "Error: target ${targetFileResolved} is not ready"
    exit 1
fi
}

CYLC_RUN_DIR="${CYLC_RUN_DIR:-$HOME/cylc-run}"
. "${CYLC_RUN_DIR}/${CYLC_WORKFLOW_ID}/.service/etc/job.sh"
cylc__job__main

#EOF: 19800101T0000Z/pp-starter/01
