{% set EPMT_PREAMBLE %}
            export PAPIEX_OLD_OUTPUT=$PAPIEX_OUTPUT
            export PAPIEX_OLD_OPTIONS=$PAPIEX_OPTIONS
            unset PAPIEX_OUTPUT PAPIEX_OPTIONS LD_PRELOAD
{% endset %}
{% set EPMT_POSTAMBLE %}
            export PAPIEX_OPTIONS=$PAPIEX_OLD_OPTIONS
            export LD_PRELOAD=$PAPIEX_LD_PRELOAD
            export PAPIEX_OUTPUT=$PAPIEX_OLD_OUTPUT
{% endset %}

    [[root]]
        init-script = """
            module load ppan_environment
            module load epmt
            module list
            epmt check
        """
        env-script = """
            {{ EPMT_PREAMBLE }}
            epmt annotate EPMT_JOB_TAGS="exp_name:{{ EXPERIMENT }};exp_fre_mod:{{ FRE_VERSION }};exp_platform:{{ PLATFORM }};exp_target:{{ TARGET }};exp_component:PLACE_HOLDER;exp_component_source:PLACE_HOLDER;exp_time:$CYLC_TASK_CYCLE_POINT;exp_seg_months:{{ HISTORY_SEGMENT }};pp_chunk_a_months:{{ MOS_PER_CHUNK_A }};pp_chunk_b_months:{{ MOS_PER_CHUNK_B }};script_name:$CYLC_TASK_NAME;exp_run_uuid:$CYLC_WORKFLOW_UUID"
            {{ EPMT_POSTAMBLE }}
        """
        {# retries don't make sense yet while testing as they will just delay the failures #}
        {# execution retry delays = PT1M, PT5M, PT10M                                      #}
        # Set default time limit to 4 hours
        execution time limit = PT4H
        platform = ppan_test
        [[[events]]]
            mail events = startup shutdown aborted timeout stalled inactivity
            submission timeout = P1D
        [[[directives]]]
            --comment=xtmp,epmt,fre/{{ FRE_VERSION }}
        [[[environment]]]
            COPY_TOOL=gcp
            # Uncomment to collect data for the data lineage tool
            # EPMT_DATA_LINEAGE=1

    [[PP-STARTER]]
        env-script = """
            {{ EPMT_PREAMBLE }}
            epmt annotate EPMT_JOB_TAGS="exp_name:{{ EXPERIMENT }};exp_fre_mod:{{ FRE_VERSION }};exp_platform:{{ PLATFORM }};exp_target:{{ TARGET }};exp_component:pp-starter;exp_component_source:PLACE_HOLDER;exp_time:$CYLC_TASK_CYCLE_POINT;exp_seg_months:{{ HISTORY_SEGMENT }};pp_chunk_a_months:{{ MOS_PER_CHUNK_A }};pp_chunk_b_months:{{ MOS_PER_CHUNK_B }};script_name:$CYLC_TASK_NAME;exp_run_uuid:$CYLC_WORKFLOW_UUID"
            {{ EPMT_POSTAMBLE }}
        """
    [[STAGE-HISTORY]]
        env-script = """
            {{ EPMT_PREAMBLE }}
            epmt annotate EPMT_JOB_TAGS="exp_name:{{ EXPERIMENT }};exp_fre_mod:{{ FRE_VERSION }};exp_platform:{{ PLATFORM }};exp_target:{{ TARGET }};exp_component:stage-history;exp_component_source:PLACE_HOLDER;exp_time:$CYLC_TASK_CYCLE_POINT;exp_seg_months:{{ HISTORY_SEGMENT }};pp_chunk_a_months:{{ MOS_PER_CHUNK_A }};pp_chunk_b_months:{{ MOS_PER_CHUNK_B }};script_name:$CYLC_TASK_NAME;exp_run_uuid:$CYLC_WORKFLOW_UUID"
            {{ EPMT_POSTAMBLE }}
        """
        pre-script = """
            module load gcp/2.3 hsm/1.3.0
            module load fre/{{ FRE_VERSION }}
        """

{% if DO_REFINEDIAG or DO_PREANALYSIS %}
    [[PRE-ANALYSIS]]
        env-script = """
            {{ EPMT_PREAMBLE }}
            epmt annotate EPMT_JOB_TAGS="exp_name:{{ EXPERIMENT }};exp_fre_mod:{{ FRE_VERSION }};exp_platform:{{ PLATFORM }};exp_target:{{ TARGET }};exp_component:analysis;exp_component_source:PLACE_HOLDER;exp_time:$CYLC_TASK_CYCLE_POINT;exp_seg_months:{{ HISTORY_SEGMENT }};pp_chunk_a_months:{{ MOS_PER_CHUNK_A }};pp_chunk_b_months:{{ MOS_PER_CHUNK_B }};script_name:$CYLC_TASK_NAME;exp_run_uuid:$CYLC_WORKFLOW_UUID"
            {{ EPMT_POSTAMBLE }}
        """
        pre-script = """
            env
            set -x
            module load fre/{{ FRE_VERSION }}
            module load gcp
            mkdir -p $work $tempCache $refineDiagDir
            hsmget -v -t -a $histDir -p {{ PTMP_DIR }}/$histDir -w $work $hsmdate/\*
            cd $work/$hsmdate
            ls
        """
{% endif %}

{% if DO_REFINEDIAG %}
    [[REFINE-DIAG]]
        env-script = """
            {{ EPMT_PREAMBLE }}
            epmt annotate EPMT_JOB_TAGS="exp_name:{{ EXPERIMENT }};exp_fre_mod:{{ FRE_VERSION }};exp_platform:{{ PLATFORM }};exp_target:{{ TARGET }};exp_component:refineDiag;exp_component_source:PLACE_HOLDER;exp_time:$CYLC_TASK_CYCLE_POINT;exp_seg_months:{{ HISTORY_SEGMENT }};pp_chunk_a_months:{{ MOS_PER_CHUNK_A }};pp_chunk_b_months:{{ MOS_PER_CHUNK_B }};script_name:$CYLC_TASK_NAME;exp_run_uuid:$CYLC_WORKFLOW_UUID"
            {{ EPMT_POSTAMBLE }}
        """
        post-script = """
            cd $refineDiagDir
            if ls *nc; then
                refinedCount=$(ls -1 *nc | wc -l)
            else
                refinedCount=0
            fi
            if [[ $refinedCount > 0 ]]; then
                for file in $(ls -1 *nc); do
                    list_ncvars.csh -st01234 $file |& tee $CYLC_WORKFLOW_SHARE_DIR/refineDiag.log
                done
            else
                echo ERROR: RefineDiag script did not create any NetCDF files as it was expected to do
                exit 1
            fi
            if [[ -f {{ HISTORY_DIR_REFINED }}/$oname.nc.tar ]]; then
                echo "the contents of {{ PTMP_DIR }}/{{ HISTORY_DIR_REFINED }} is..."
                ls {{ PTMP_DIR }}/{{ HISTORY_DIR_REFINED }}
                echo "the contents of {{ PTMP_DIR }}/{{ HISTORY_DIR_REFINED }}/$oname.nc is..."
                ls {{ PTMP_DIR }}/{{ HISTORY_DIR_REFINED }}/$oname.nc
                hsmget -v -t -a {{ HISTORY_DIR_REFINED }} -p {{ PTMP_DIR }}/{{ HISTORY_DIR_REFINED }} -w $TMPDIR/modify_refineDiag $hsmdate/\*
                mv -f * $TMPDIR/modify_refineDiag
                mv -f $TMPDIR/modify_refineDiag/* .
                rm -rf $TMPDIR/modify_refineDiag
            fi
            hsmput -v -t -s tar -a {{ HISTORY_DIR_REFINED }} -p {{ PTMP_DIR }}/{{ HISTORY_DIR_REFINED }} -w $TMPDIR/history_refineDiag $hsmdate
        """
{% endif %}

    [[SPLIT-NETCDF]]
        pre-script = module load cdo nco && mkdir -p $outputDir

    [[RENAME-SPLIT-TO-PP]]
        pre-script = module load netcdf-c cdo && mkdir -p $outputDir

    [[REMAP-PP-COMPONENTS]]
        pre-script = """
            module load fre-nctools miniforge
            set +u
            conda activate /nbhome/fms/conda/envs/fre-2025.01
            set -u
            module load gcp
            mkdir -p $outputDir
        """

    [[DATA-CATALOG]]
        env-script = """
            {{ EPMT_PREAMBLE }}
            epmt annotate EPMT_JOB_TAGS="exp_name:{{ EXPERIMENT }};exp_fre_mod:{{ FRE_VERSION }};exp_platform:{{ PLATFORM }};exp_target:{{ TARGET }};exp_component:data-catalog:exp_component_source:PLACE_HOLDER;exp_time:$CYLC_TASK_CYCLE_POINT;exp_seg_months:{{ HISTORY_SEGMENT }};pp_chunk_a_months:{{ MOS_PER_CHUNK_A }};pp_chunk_b_months:{{ MOS_PER_CHUNK_B }};script_name:$CYLC_TASK_NAME;exp_run_uuid:$CYLC_WORKFLOW_UUID"
            {{ EPMT_POSTAMBLE }}
        """
        pre-script = module load fre/{{ FRE_VERSION }} 
        
        [[[directives]]]
            --partition=analysis

    [[MAKE-TIMESERIES]]
        pre-script = module load cdo && mkdir -p $outputDir

    [[MAKE-TIMEAVGS]]
        pre-script = module load fre-python-tools && mkdir -p $outputDir

    [[COMBINE-TIMEAVGS]]
        pre-script = module load cdo nco && mkdir -p $outputDir

{% if DO_REGRID %}
    [[REGRID-XY]]
        pre-script = """
            # the conda activate below brings in an old fre-nctools
            # that is conda installable. we need an updated
            # fre-nctools to regrid new ocean output
            module load miniforge
            set +u
            conda activate /nbhome/fms/conda/envs/fre-2025.01
            set -u
            module load fre-nctools/2024.05
            which fregrid
            mkdir -p $outputDir
        """
{% endif %}

    [[MASK-ATMOS-PLEVEL]]
        pre-script = module load python/3.10

    [[CLEAN]]
        env-script = """
            {{ EPMT_PREAMBLE }}
            epmt annotate EPMT_JOB_TAGS="exp_name:{{ EXPERIMENT }};exp_fre_mod:{{ FRE_VERSION }};exp_platform:{{ PLATFORM }};exp_target:{{ TARGET }};exp_component:clean;exp_component_source:PLACE_HOLDER;exp_time:$CYLC_TASK_CYCLE_POINT;exp_seg_months:{{ HISTORY_SEGMENT }};pp_chunk_a_months:{{ MOS_PER_CHUNK_A }};pp_chunk_b_months:{{ MOS_PER_CHUNK_B }};script_name:$CYLC_TASK_NAME;exp_run_uuid:$CYLC_WORKFLOW_UUID"
            {{ EPMT_POSTAMBLE }}
        """
        pre-script = "set -x"
		

{% if DO_MDTF %}
    [[mdtf]]
        env-script = """
            {{ EPMT_PREAMBLE }}
            epmt annotate EPMT_JOB_TAGS="exp_name:{{ EXPERIMENT }};exp_fre_mod:{{ FRE_VERSION }};exp_platform:{{ PLATFORM }};exp_target:{{ TARGET }};exp_component:mdtf;exp_component_source:PLACE_HOLDER;exp_time:$CYLC_TASK_CYCLE_POINT;exp_seg_months:{{ HISTORY_SEGMENT }};pp_chunk_a_months:{{ MOS_PER_CHUNK_A }};pp_chunk_b_months:{{ MOS_PER_CHUNK_B }};script_name:$CYLC_TASK_NAME;exp_run_uuid:$CYLC_WORKFLOW_UUID"
            {{ EPMT_POSTAMBLE }}
        """
        pre-script = mkdir -p $MDTF_TMPDIR
        [[[environment]]]
            MDTF_TMPDIR = $CYLC_WORKFLOW_SHARE_DIR/mdtf
{% endif %}

{% if DO_REGRID_STATIC or DO_NATIVE_STATIC %}
    [[combine-statics]]
        env-script = """
            {{ EPMT_PREAMBLE }}
            epmt annotate EPMT_JOB_TAGS="exp_name:{{ EXPERIMENT }};exp_fre_mod:{{ FRE_VERSION }};exp_platform:{{ PLATFORM }};exp_target:{{ TARGET }};exp_component:combine-statics;exp_component_source:PLACE_HOLDER;exp_time:$CYLC_TASK_CYCLE_POINT;exp_seg_months:{{ HISTORY_SEGMENT }};pp_chunk_a_months:{{ MOS_PER_CHUNK_A }};pp_chunk_b_months:{{ MOS_PER_CHUNK_B }};script_name:$CYLC_TASK_NAME;exp_run_uuid:$CYLC_WORKFLOW_UUID"
            {{ EPMT_POSTAMBLE }}
        """
        pre-script = module load cdo && mkdir -p $outputDir
{% endif %}


{% set PP_COMPONENTS_LIST = PP_COMPONENTS.split(' ') %}
{% for COMPONENT in PP_COMPONENTS_LIST %}
    [[<component={{ COMPONENT }}>]]
        env-script = """
    {{ EPMT_PREAMBLE }}
            epmt annotate EPMT_JOB_TAGS="exp_name:{{ EXPERIMENT }};exp_fre_mod:{{ FRE_VERSION }};exp_platform:{{ PLATFORM }};exp_target:{{ TARGET }};exp_component:{{ COMPONENT }};exp_component_source:PLACE_HOLDER;exp_time:$CYLC_TASK_CYCLE_POINT;exp_seg_months:{{ MOS_PER_HIST_SEGMENT }};pp_chunk_a_months:{{ MOS_PER_CHUNK_A }};pp_chunk_b_months:{{ MOS_PER_CHUNK_B }};script_name:$CYLC_TASK_NAME;exp_run_uuid:$CYLC_WORKFLOW_UUID"
    {{ EPMT_POSTAMBLE }}
        """
{% endfor %}

{% if DO_REGRID %}
    {% set REGRID_COMPONENTS  =  "regrid-xy" | form_task_parameter_components('temporal', PP_COMPONENTS) %}
    {% for KEY in REGRID_COMPONENTS %}
    [[<regrid={{ KEY }}>]]
        env-script = """
        {{ EPMT_PREAMBLE }}
            epmt annotate EPMT_JOB_TAGS="exp_name:{{ EXPERIMENT }};exp_fre_mod:{{ FRE_VERSION }};exp_platform:{{ PLATFORM }};exp_target:{{ TARGET }};exp_component:{{ REGRID_COMPONENTS[KEY] }};exp_component_source:{{ KEY }};exp_time:$CYLC_TASK_CYCLE_POINT;exp_seg_months:{{ MOS_PER_HIST_SEGMENT }};pp_chunk_a_months:{{ MOS_PER_CHUNK_A }};pp_chunk_b_months:{{ MOS_PER_CHUNK_B }};script_name:$CYLC_TASK_NAME;exp_run_uuid:$CYLC_WORKFLOW_UUID"
        {{ EPMT_POSTAMBLE }}
        """
    {% endfor %}

    {% if DO_REGRID_STATIC %}
        {% set REGRID_STATIC_COMPONENTS  =  "regrid-xy" | form_task_parameter_components('static', PP_COMPONENTS) %}
        {% for KEY in REGRID_STATIC_COMPONENTS %}
    [[<regrid_static={{ KEY }}>]]
        env-script = """
            {{ EPMT_PREAMBLE }}
            epmt annotate EPMT_JOB_TAGS="exp_name:{{ EXPERIMENT }};exp_fre_mod:{{ FRE_VERSION }};exp_platform:{{ PLATFORM }};exp_target:{{ TARGET }};exp_component:{{ REGRID_STATIC_COMPONENTS[KEY] }};exp_component_source:{{ KEY }};exp_time:$CYLC_TASK_CYCLE_POINT;exp_seg_months:{{ MOS_PER_HIST_SEGMENT }};pp_chunk_a_months:{{ MOS_PER_CHUNK_A }};pp_chunk_b_months:{{ MOS_PER_CHUNK_B }};script_name:$CYLC_TASK_NAME;exp_run_uuid:$CYLC_WORKFLOW_UUID"
            {{ EPMT_POSTAMBLE }}
        """
        {% endfor %}
    {% endif %}
{% endif %}

{% if DO_NATIVE %}
    {% set NATIVE_COMPONENTS  =  "native" | form_task_parameter_components('temporal', PP_COMPONENTS) %}
    {% for KEY in NATIVE_COMPONENTS %}
    [[<native={{ KEY }}>]]
        env-script = """
        {{ EPMT_PREAMBLE }}
            epmt annotate EPMT_JOB_TAGS="exp_name:{{ EXPERIMENT }};exp_fre_mod:{{ FRE_VERSION }};exp_platform:{{ PLATFORM }};exp_target:{{ TARGET }};exp_component:{{ NATIVE_COMPONENTS[KEY] }};exp_component_source:{{ KEY }};exp_time:$CYLC_TASK_CYCLE_POINT;exp_seg_months:{{ MOS_PER_HIST_SEGMENT }};pp_chunk_a_months:{{ MOS_PER_CHUNK_A }};pp_chunk_b_months:{{ MOS_PER_CHUNK_B }};script_name:$CYLC_TASK_NAME;exp_run_uuid:$CYLC_WORKFLOW_UUID"
        {{ EPMT_POSTAMBLE }}
        """
    {% endfor %}
    {% if DO_NATIVE_STATIC %}
        {% set NATIVE_STATIC_COMPONENTS  =  "native" | form_task_parameter_components('static', PP_COMPONENTS) %}
        {% for KEY in NATIVE_STATIC_COMPONENTS %}
    [[<native_static={{ KEY }}>]]
        env-script = """
            {{ EPMT_PREAMBLE }}
            epmt annotate EPMT_JOB_TAGS="exp_name:{{ EXPERIMENT }};exp_fre_mod:{{ FRE_VERSION }};exp_platform:{{ PLATFORM }};exp_target:{{ TARGET }};exp_component:{{ NATIVE_STATIC_COMPONENTS[KEY] }};exp_component_source:{{ KEY }};exp_time:$CYLC_TASK_CYCLE_POINT;exp_seg_months:{{ MOS_PER_HIST_SEGMENT }};pp_chunk_a_months:{{ MOS_PER_CHUNK_A }};pp_chunk_b_months:{{ MOS_PER_CHUNK_B }};script_name:$CYLC_TASK_NAME;exp_run_uuid:$CYLC_WORKFLOW_UUID"
            {{ EPMT_POSTAMBLE }}
        """
        {% endfor %}
    {% endif %}
{% endif %}

    [[ANALYSIS]]
        pre-script = """
            module load fre/{{ FRE_VERSION }}
            module load gcp
        """

    [[BUILD-ANALYSIS]]
        pre-script = """
            module load fre/{{ FRE_VERSION }}
        """
