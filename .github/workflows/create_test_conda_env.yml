name: create_test_conda_env

on: [push]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '>=3.9'

      - name: Add conda to system path
        run: |
          # $CONDA is an env var pointing to root of miniconda dir
          echo $CONDA/bin >> $GITHUB_PATH

      - name: Create fre-workflows environment
        run: |
          # create environment containing all dependencies
          # the env cannot be explicitly activated in github CI/CD
          conda env create -f environment.yml --name fre-workflows

          # add conda env's executables to github's PATH equiv.
          echo $CONDA/envs/fre-workflows/bin >> $GITHUB_PATH

      - name: in fre-workflows environment, cylc lint
        run: |
          # lint .cylc workflow files
          cylc lint -v

      - name: Jinja2filter pytest
        run: |
          pytest -vv -rx ./Jinja2Filters/tests

      - name: Jinja2filter pylint
        run: |
          pylint -v --fail-under 7.00 ./Jinja2Filters

      - name: make-timeseries pytest
        run: |
          # Install required dependencies for make-timeseries tests
          sudo apt-get update && sudo apt-get install -y cdo netcdf-bin
          pip install metomi-isodatetime
          # Create mock scripts for cylc and fre
          mkdir -p /tmp/mock_bin
          cat << 'EOF' > /tmp/mock_bin/cylc
          #!/bin/bash
          if [[ "$1" == "cycle-point" && "$2" == "--template" ]]; then
              template="$3"
              input="$4"
              case "$template" in
                  "CCYYMMDDThhmm")
                      if [[ ${#input} -eq 4 ]]; then
                          echo "${input}0101T0000"
                      elif [[ ${#input} -eq 6 ]]; then
                          echo "${input}01T0000"
                      elif [[ ${#input} -eq 8 ]]; then
                          echo "${input}T0000"
                      elif [[ ${#input} -eq 11 && "$input" =~ T ]]; then
                          echo "$input"
                      else
                          echo "$input"
                      fi
                      ;;
                  "CCYY") echo "${input:0:4}" ;;
                  "CCYYMM") echo "${input:0:6}" ;;
                  "CCYYMMDD") echo "${input:0:8}" ;;
                  *) echo "$input" ;;
              esac
          else
              echo "Mock cylc: unsupported command"
              exit 1
          fi
          EOF
          cat << 'EOF' > /tmp/mock_bin/fre
          #!/bin/bash
          if [[ "$1" == "-v" && "$2" == "pp" && "$3" == "ppval" ]]; then
              echo "Mock fre ppval validation passed for $5"
              exit 0
          else
              echo "Mock fre: unsupported command"
              exit 0
          fi
          EOF
          chmod +x /tmp/mock_bin/cylc /tmp/mock_bin/fre
          # Run tests with mock tools in PATH
          PATH="/tmp/mock_bin:$PATH" pytest -vv -rx ./app/make-timeseries/test

      - name: PPANHandler pytest
        run: |
          pytest -vv -rx ./lib/python/tests/test_PPANHandler.py

      - name: papiex_tooler pytest
        run: |
          pytest -vv -rx ./lib/python/tests/test_papiex_tooler.py

      - name: papiex_ops and tool_ops_w_papiex pylint
        run: |
          pylint -v --fail-under 7.50 ./lib/python

      - name: combine-statics pytest
        continue-on-error: false
        run: |
          # pytest unittests for remap-pp-components
          pytest -v -v -rx  ./app/combine-statics/tests

      - name: combine-statics pylint
        run: |
          # pytest unittests for remap-pp-components
          pylint -v --fail-under  9.85 ./app/combine-statics

      - name: analysis_validator pytest (guarded against failure)
        continue-on-error: true
        run: |
          pytest -vv -rx ./tests/test_analysis_validator.py

      - name: python macros pylint
        run: |
          pylint -v --fail-under 3.70 ./meta/lib/python/macros/
